# -*- coding: utf-8 -*-
"""assignment2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oLyBcPU84kSlF1y8SBfDv9MPWtvMDvxT
"""

pip install pysmiles

# pip install pysmiles 
from pysmiles import read_smiles
import networkx as nx
smiles = 'CC(C)CN1C=NC2=C1C3=CC=CC=C3N=C2N'
mol = read_smiles(smiles)

# atom vector (C only)
print(mol.nodes(data='element'))
# adjacency matrix
print(nx.to_numpy_matrix(mol))

import matplotlib.pyplot as plt
elements = nx.get_node_attributes(mol, name = "element")
nx.draw(mol, with_labels=True, labels = elements, pos=nx.spring_layout(mol))
plt.gca().set_aspect('equal')

pip install rdkit

#pip install rdkit
# import rdkit
from rdkit import Chem
from rdkit.Chem import Draw

# define the smiles string and covert it into a molecule sturcture ------------
caffeine_smiles = 'CN1C=NC2=C1C(=O)N(C(=O)N2C)C'

mol = Chem.MolFromSmiles (caffeine_smiles)

# draw the modecule -----------------------------------------------------------
Draw.MolToFile(mol, 'caffeine.png')

# draw the molecule with property ---------------------------------------------
for i, atom in enumerate(mol.GetAtoms()):
    atom.SetProp("molAtomMapNumber", str(atom.GetIdx()))

Draw.MolToFile(mol, 'caffeine_with_prop.png')

pip install panda

from rdkit import Chem

from rdkit import Chem
from rdkit.Chem import Draw

# define the smiles string and covert it into a molecule sturcture ------------
caffeine_smiles = 'CN1C=NC2=C1C(=O)N(C(=O)N2C)C'

mol = Chem.MolFromSmiles (caffeine_smiles)

# draw the modecule -----------------------------------------------------------
Draw.MolToFile(mol, 'caffeine.png')

# draw the molecule with property ---------------------------------------------
for i, atom in enumerate(mol.GetAtoms()):
    atom.SetProp("molAtomMapNumber", str(atom.GetIdx()))

Draw.MolToImage(mol, 'caffeine_with_prop.png')

import pandas as pd
import numpy as np
party={
    'Name':["Riya","Palak","Anushka","Shreya","Moumita"],
    'S.No':[1,2,3,4,5],
    'Rank':[2,3,4,1,5],
    'Money_lend':[200,300,500,100,600]

}
df=pd.DataFrame(party)
print(df)

#DataFrame.loc[] attribute
import pandas as pd
import numpy as np
party={
    'Name':["Riya","Palak","Anushka","Shreya","Moumita"],
    'S.No':[1,2,3,4,5],
    'Rank':[2,3,4,1,5],
    'Money_lend':[200,300,500,100,600]

}
df=pd.DataFrame(party)


df2=df.loc[df['Name'] == "Riya"]
print(df2)

#Dataframe.query() attribute
import pandas as pd
import numpy as np
party={
    'Name':["Riya","Palak","Anushka","Shreya","Moumita"],
    'S.No':[1,2,3,4,5],
    'Rank':[2,3,4,1,5],
    'Money_lend':[200,300,500,100,600]

}
df=pd.DataFrame(party)


df2=df.query("Name == 'Shreya'")
print(df2)
df3=df.query("Rank == 3")
print(df3)

#DataFrame.apply() attribute
import pandas as pd
import numpy as np
party={
    'Name':["Riya","Palak","Anushka","Shreya","Moumita"],
    'S.No':[1,2,3,4,5],
    'Rank':[2,3,4,1,5],
    'Money_lend':[200,300,500,100,600]

}
df=pd.DataFrame(party)


# By using lambda function
print(df.apply(lambda row: row[df['Name'].isin(['Riya','Shreya'])]))